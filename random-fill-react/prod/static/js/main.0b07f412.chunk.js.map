{"version":3,"sources":["MainFrame.js","App.js","serviceWorker.js","index.js"],"names":["PlayButton","MainFrame","state","GameRun","BallPreFrime","color","ObjectsCount","ObjectsMaxCount","frames","draw_dot","BallsCount","ctx","refs","canvas","getContext","BallColor","RandomColor","Math","floor","random","fillStyle","beginPath","arc","PI","fill","setState","draw_frame","clearRect","requestAnimationFrame","PressPlayBTN","this","className","onClick","ref","width","height","align","href","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sNAEIA,E,iFAiHWC,G,iNA7GXC,MAAQ,CACJC,SAAS,EACTC,aAAc,GACdC,MAAO,EACPC,aAAc,EACdC,gBAAiB,IACjBC,OAAQ,G,EAGZC,SAAW,WAEP,IADA,IAAIC,EAAa,EAAKR,MAAMM,OACrBE,GAAY,CACfA,IACA,IAAMC,EAAM,EAAKC,KAAKC,OAAOC,WAAW,MACpCC,EAAY,GACVC,EAAcC,KAAKC,MAAsB,EAAhBD,KAAKE,UAClB,KAAdJ,GAAoC,IAAhBC,IACpBD,EAAY,OAGE,KAAdA,GAAoC,IAAhBC,IACpBD,EAAY,SAOhBJ,EAAIS,UAAYL,EAChBJ,EAAIU,YACJV,EAAIW,IAAIL,KAAKC,MAAsB,IAAhBD,KAAKE,UAAiBF,KAAKC,MAAsB,IAAhBD,KAAKE,UAAiB,EAAG,EAAG,EAAIF,KAAKM,IACzFZ,EAAIa,OAEJ,EAAKC,SAAS,CAACnB,aAAc,EAAKJ,MAAMI,aAAa,M,EAI7DoB,WAAa,YACT,EAAKD,SAAS,CAACjB,OAAQ,EAAKN,MAAMM,OAAO,IACrC,EAAKN,MAAMI,aAAe,EAAKJ,MAAMK,mBACzB,EAAKK,KAAKC,OAAOC,WAAW,MACpCa,UAAU,EAAG,EAAG,IAAK,KACzB,EAAKF,SAAS,CAACnB,aAAc,KAEjC,EAAKG,WACD,EAAKP,MAAMC,SACXyB,sBAAsB,EAAKF,a,EAUnCG,aAAe,WACP,EAAK3B,MAAMC,QACX,EAAKsB,SAAS,CAACtB,SAAS,KAExB,EAAKsB,SAAS,CAACtB,SAAS,IACxByB,sBAAsB,EAAKF,c,mFAV3BI,KAAK5B,MAAMC,SACXyB,sBAAsBE,KAAKJ,c,+BAqB/B,OALI1B,EADA8B,KAAK5B,MAAMC,QACE,4BAAQ4B,UAAU,UAAUC,QAASF,KAAKD,cAA1C,SAEA,4BAAQE,UAAU,UAAUC,QAASF,KAAKD,cAA1C,QAIb,6BACI,6BACA,yBAAKE,UAAU,cACX,yBAAKA,UAAU,SACX,4BAAQA,UAAU,eAAeE,IAAI,SAASC,MAAO,IAAKC,OAAQ,MAClE,6BAAMnC,IAEV,yBAAK+B,UAAU,QACX,uBAAGK,MAAM,QAAT,wBAAqC,6BACrC,6BADA,sEAEmE,6BAFnE,4EAGyE,6BAHzE,+CAI4C,6BAJ5C,wDAKqD,6BACrD,6BACA,uBAAGC,KAAK,oFAAR,UAAqG,6BACrG,6BARA,4B,GApFAC,cCQTC,MARf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,QCKcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0b07f412.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './MainFrame.css';\r\nvar PlayButton;\r\n\r\nclass MainFrame extends Component {\r\n\r\n    state = {\r\n        GameRun: false,\r\n        BallPreFrime: 50,\r\n        color: 1,\r\n        ObjectsCount: 0,\r\n        ObjectsMaxCount: 200000,\r\n        frames: 0\r\n    }\r\n\r\n    draw_dot = () => {\r\n        var BallsCount = this.state.frames;\r\n        while (BallsCount) {\r\n            BallsCount--\r\n            const ctx = this.refs.canvas.getContext(\"2d\");\r\n            var BallColor = \"\";\r\n            const RandomColor = Math.floor(Math.random() * 3);\r\n            if (BallColor === \"\" && RandomColor === 1) {\r\n                BallColor = \"red\";\r\n                // this.setState({color: 2})\r\n            }\r\n            if (BallColor === \"\" && RandomColor === 2) {\r\n                BallColor = \"white\";\r\n                // this.setState({color: 3})\r\n            }\r\n            // if (BallColor === \"\" && RandomColor === 0) {\r\n            //     BallColor = \"black\";\r\n            //     this.setState({color: 1})\r\n            // }\r\n            ctx.fillStyle = BallColor;\r\n            ctx.beginPath();\r\n            ctx.arc(Math.floor(Math.random() * 450), Math.floor(Math.random() * 450), 1, 0, 5 * Math.PI);\r\n            ctx.fill();\r\n            // ctx.stroke();\r\n            this.setState({ObjectsCount: this.state.ObjectsCount+1})\r\n        }\r\n    }\r\n\r\n    draw_frame = () => {\r\n        this.setState({frames: this.state.frames+1})\r\n        if (this.state.ObjectsCount > this.state.ObjectsMaxCount) {\r\n            const ctx = this.refs.canvas.getContext(\"2d\");\r\n            ctx.clearRect(0, 0, 450, 450);\r\n            this.setState({ObjectsCount: 0})\r\n        }\r\n        this.draw_dot();\r\n        if (this.state.GameRun) {\r\n            requestAnimationFrame(this.draw_frame);\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.GameRun) {\r\n            requestAnimationFrame(this.draw_frame);\r\n        }\r\n    }\r\n\r\n    PressPlayBTN = () => {\r\n        if (this.state.GameRun) {\r\n            this.setState({GameRun: false});\r\n        } else {\r\n            this.setState({GameRun: true});\r\n            requestAnimationFrame(this.draw_frame);\r\n        }    \r\n    }\r\n\r\n    render() {\r\n        \r\n        if (this.state.GameRun) {\r\n            PlayButton = <button className=\"PlayBTN\" onClick={this.PressPlayBTN}>Pause</button>;\r\n        } else {\r\n            PlayButton = <button className=\"PlayBTN\" onClick={this.PressPlayBTN}>Play</button>;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <br/>\r\n                <div className=\"Main_block\">\r\n                    <div className=\"Frame\">\r\n                        <canvas className=\"canvas_frame\" ref=\"canvas\" width={450} height={450} />\r\n                        <div>{PlayButton}</div>\r\n                    </div>\r\n                    <div className=\"text\">\r\n                        <p align=\"left\"> Random fill image :)<br/>\r\n                        <br/>\r\n                        Why is this needed?.... press 'Play' and look into the black square<br/>\r\n                        red dots start to appear there fully randomly, and you can see something.<br/>\r\n                        What will you see?... no one knows -_(-_-)_-<br/>\r\n                        It all depends on your brain. It's made just for fun.<br/>\r\n                        <br/>\r\n                        <a href=\"https://github.com/Octanium91/octanium91.github.io/tree/master/random-fill-react\">GitHub</a><br/>\r\n                        <br/>\r\n                        Created on React.</p>\r\n                    </div>\r\n                    {/* <div className=\"Statistic\">\r\n                        <table border=\"1\" width=\"100%\" cellpadding=\"5\">\r\n                        <tr>\r\n                            <th>Statistic:</th>\r\n                            <th>Frames ({this.state.frames})</th>\r\n                            <th>Objects count ({this.state.ObjectsCount})</th>\r\n                        </tr>\r\n                        </table>\r\n                        {/* <div className=\"Statistic-frames\">Frames: {this.state.frames}</div>\r\n                        <div className=\"Statistic-ObjCount\">Objects count: {this.state.ObjectsCount}</div> */}\r\n                    {/* </div>  */}\r\n                </div> \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default MainFrame;","import React from 'react';\nimport './App.css';\nimport MainFrame from './MainFrame.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainFrame/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}