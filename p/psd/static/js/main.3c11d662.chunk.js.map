{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","canvasRef","useRef","useState","mackupPsd","setMackupPsd","imageFiles","setImageFiles","loadLinks","setLoadLinks","proc","setProc","useEffect","console","log","x","linksLoad","imageFile","img","Image","src","URL","createObjectURL","onload","children","forEach","leier","name","leierChild","clipping","canvasObj","current","ctx","getContext","width","canvas","height","drawImage","arrayBuffer","writePsd","newPsd","readPsd","blob","Blob","type","url","push","Date","getTime","Math","random","toString","substring","toDataURL","length","className","logo","alt","onChange","event","target","files","fileToArrayBuffer","then","data","psd2","multiple","map","item","href","download","style","display","ref","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c11d662.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useEffect, useState, useRef} from 'react';\nimport logo from './logo.svg';\nimport fileToArrayBuffer from 'file-to-array-buffer';\n// import 'ag-psd/initialize-canvas';\nimport { readPsd, writePsd } from 'ag-psd';\nimport './App.css';\n\nfunction App() {\n\n  const canvasRef = useRef(null);\n  const [mackupPsd, setMackupPsd] = useState(null)\n  const [imageFiles, setImageFiles] = useState(null)\n  // const [mackupDownload, setMackupDownload] = useState(null)\n  const [loadLinks, setLoadLinks] = useState([])\n  const [proc, setProc] = useState(false)\n\n  useEffect(() => {\n    console.log(\"eeeeee\")\n  }, [])\n\n  useEffect(() => {\n    if (mackupPsd && imageFiles) {\n      let linksLoad = []\n      for (var x = 0; x < imageFiles.length; x++) {\n        const imageFile = imageFiles[x]\n        console.log(\"file\",imageFile)\n        let img = new Image();\n        img.src = URL.createObjectURL(imageFile);\n        img.onload = () => {\n          setProc(false)\n          console.log(\"uloaded psd file\", mackupPsd)\n          mackupPsd.children.forEach(leier => {\n            if (leier.name === \"YOUR CHANGE HERE\") {\n              console.log(\"find YOUR CHANGE HERE leier\")\n              leier.children.forEach(leierChild => {\n                if (leierChild.clipping) {\n                  const canvasObj = canvasRef.current;\n                  const ctx = canvasObj.getContext('2d');\n                  canvasObj.width = leierChild.canvas.width;\n                  canvasObj.height = leierChild.canvas.height;\n                  ctx.drawImage(img, 0,0, 650, 414);\n                  console.log(\"ch\", leierChild.canvas.height)\n                  console.log(\"cw\", leierChild.canvas.width)\n                  console.log(\"this welbe deleted!\")\n                  // canvasObj.width = leierChild.canvas.width;\n                  // canvasObj.height = leierChild.canvas.height;\n                  leierChild.canvas = canvasObj\n                  console.log(\"new psd file\", mackupPsd)\n                  const arrayBuffer = writePsd(mackupPsd)\n                  const newPsd = readPsd(arrayBuffer);\n                  console.log(\"new psd created\", newPsd)\n                  var blob = new Blob([arrayBuffer], { type: 'application/octet-stream' });\n                  var url = URL.createObjectURL(blob);\n                  linksLoad.push({url, name: new Date().getTime()+\"-\"+Math.random().toString(36).substring(10)+Math.random().toString(36).substring(10)+\".psd\", canvas: canvasRef.current.toDataURL()})\n                  // setMackupDownload(url)\n                  console.log(typeof arrayBuffer, arrayBuffer)\n                }\n              })\n            }\n          })\n          // canvasRefMain.current = mackupPsd.canvas\n\n\n          setLoadLinks(linksLoad)\n          setProc(true)\n        };\n        // ctx.fillStyle = '#000000'\n        // ctx.beginPath()\n        // ctx.arc(50, 100, 20, 0, 2*Math.PI)\n        // ctx.fill()\n\n      }\n    }\n  }, [mackupPsd, imageFiles])\n\n    const changeHandler = (event) => {\n      console.log(event.target.files[0])\n      fileToArrayBuffer(event.target.files[0]).then((data) => {\n        console.log(data)\n        const psd2 = readPsd(data);\n        setMackupPsd(psd2)\n        // console.log(psd2);\n      });\n        // const psd2 = readPsd(event.target.files[0]);\n        // console.log(psd2);\n    }\n\n  const changeHandlerImgs = (event) => {\n    console.log(event.target)\n    setImageFiles(event.target.files)\n    // const psd2 = readPsd(event.target.files[0]);\n    // console.log(psd2);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {/*<p>*/}\n        {/*  Edit <code>src/App.js</code> and save to reload.*/}\n        {/*</p>*/}\n        <input type=\"file\" name=\"file\" onChange={changeHandler} />\n        {/*<a href={mackupDownload} download> get makc up</a>*/}\n        {/*<a*/}\n        {/*  className=\"App-link\"*/}\n        {/*  href=\"https://reactjs.org\"*/}\n        {/*  target=\"_blank\"*/}\n        {/*  rel=\"noopener noreferrer\"*/}\n        {/*>*/}\n        {/*  Learn React*/}\n        {/*</a>*/}\n        <input type=\"file\" name=\"file\" onChange={changeHandlerImgs} multiple/>\n        {proc&&<span>-Files-</span>}\n        {loadLinks.map(item => <div><img alt={item.name} height='150px' width='auto' src={item.canvas} /><a href={item.url} download={item.name}>{item.name}</a></div>)}\n        {proc&&<span>-Files-</span>}\n        <canvas style={{display: \"none\"}} ref={canvasRef} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}