{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","canvasRef","useRef","useState","mackupPsd","setMackupPsd","imageFiles","setImageFiles","loadLinks","setLoadLinks","proc","setProc","useEffect","console","log","x","linksLoad","imageFile","img","Image","src","URL","createObjectURL","onload","canvasObj","current","ctx","getContext","width","height","drawImage","children","forEach","leier","name","leierChild","clipping","canvas","arrayBuffer","writePsd","blob","Blob","type","url","push","length","className","logo","alt","onChange","event","target","files","fileToArrayBuffer","then","data","psd2","readPsd","multiple","map","filename","Date","getTime","Math","random","toString","substring","href","download","style","display","ref","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAAe,MAA0B,iC,uCCoH1BA,MA7Gf,WAEE,IAAMC,EAAYC,iBAAO,MAFZ,EAGqBC,mBAAS,MAH9B,mBAGNC,EAHM,KAGKC,EAHL,OAIuBF,mBAAS,MAJhC,mBAING,EAJM,KAIMC,EAJN,OAMqBJ,mBAAS,IAN9B,mBAMNK,EANM,KAMKC,EANL,OAOWN,oBAAS,GAPpB,mBAONO,EAPM,KAOAC,EAPA,KA+Eb,OAtEAC,qBAAU,WACRC,QAAQC,IAAI,YACX,IAEHF,qBAAU,WACsB,IAEnBG,EAFPX,GAAaE,GAAY,WAC3B,IAAIU,EAAY,GADW,aAGzB,IAAMC,EAAYX,EAAWS,GAC7BF,QAAQC,IAAI,OAAOG,GACnB,IAAIC,EAAM,IAAIC,MACdD,EAAIE,IAAMC,IAAIC,gBAAgBL,GAC9BC,EAAIK,OAAS,WACXZ,GAAQ,GACR,IAAMa,EAAYvB,EAAUwB,QACtBC,EAAMF,EAAUG,WAAW,MACjCH,EAAUI,MAAQ,IAClBJ,EAAUK,OAAS,IACnBH,EAAII,UAAUZ,EAAK,EAAE,EAAG,IAAK,KAC7BL,QAAQC,IAAI,mBAAoBV,GAChCA,EAAU2B,SAASC,SAAQ,SAAAC,GACN,qBAAfA,EAAMC,OACRrB,QAAQC,IAAI,+BACZmB,EAAMF,SAASC,SAAQ,SAAAG,GACjBA,EAAWC,WACbvB,QAAQC,IAAI,uBACZqB,EAAWE,OAASb,UAK5BX,QAAQC,IAAI,eAAgBV,GAC5B,IAAMkC,EAAcC,mBAASnC,GACzBoC,EAAO,IAAIC,KAAK,CAACH,GAAc,CAAEI,KAAM,6BACvCC,EAAMtB,IAAIC,gBAAgBkB,GAC9BxB,EAAU4B,KAAKD,GAEf9B,QAAQC,WAAWwB,EAAaA,GAChC7B,EAAaO,GACbL,GAAQ,KAhCZ,IAASI,EAAI,EAAGA,EAAIT,EAAWuC,OAAQ9B,IAAM,IAFlB,KA2C5B,CAACX,EAAWE,IAuBb,qBAAKwC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAK1B,IAAK2B,EAAMD,UAAU,WAAWE,IAAI,SAIzC,uBAAON,KAAK,OAAOR,KAAK,OAAOe,SA3Bb,SAACC,GACrBrC,QAAQC,IAAIoC,EAAMC,OAAOC,MAAM,IAC/BC,IAAkBH,EAAMC,OAAOC,MAAM,IAAIE,MAAK,SAACC,GAC7C1C,QAAQC,IAAIyC,GACZ,IAAMC,EAAOC,kBAAQF,GACrBlD,EAAamD,SAgCb,uBAAOd,KAAK,OAAOR,KAAK,OAAOe,SAzBX,SAACC,GACzBrC,QAAQC,IAAIoC,EAAMC,QAClB5C,EAAc2C,EAAMC,OAAOC,QAuBqCM,UAAQ,IACnEhD,GAAM,2CACNF,EAAUmD,KAAI,SAAAhB,GACb,IAAMiB,GAAW,IAAIC,MAAOC,UAAU,IAAIC,KAAKC,SAASC,SAAS,IAAIC,UAAU,IAAIH,KAAKC,SAASC,SAAS,IAAIC,UAAU,IAAI,OAC5H,OAAO,mBAAGC,KAAMxB,EAAKyB,SAAUR,EAAxB,SAAmCA,OAE3ClD,GAAM,2CACP,wBAAQ2D,MAAO,CAACC,QAAS,QAASC,IAAKtE,UClGhCuE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.29939b69.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useEffect, useState, useRef} from 'react';\nimport logo from './logo.svg';\nimport fileToArrayBuffer from 'file-to-array-buffer';\n// import 'ag-psd/initialize-canvas';\nimport { readPsd, writePsd } from 'ag-psd';\nimport './App.css';\n\nfunction App() {\n\n  const canvasRef = useRef(null);\n  const [mackupPsd, setMackupPsd] = useState(null)\n  const [imageFiles, setImageFiles] = useState(null)\n  // const [mackupDownload, setMackupDownload] = useState(null)\n  const [loadLinks, setLoadLinks] = useState([])\n  const [proc, setProc] = useState(false)\n\n  useEffect(() => {\n    console.log(\"eeeeee\")\n  }, [])\n\n  useEffect(() => {\n    if (mackupPsd && imageFiles) {\n      let linksLoad = []\n      for (var x = 0; x < imageFiles.length; x++) {\n        const imageFile = imageFiles[x]\n        console.log(\"file\",imageFile)\n        let img = new Image();\n        img.src = URL.createObjectURL(imageFile);\n        img.onload = () => {\n          setProc(false)\n          const canvasObj = canvasRef.current;\n          const ctx = canvasObj.getContext('2d');\n          canvasObj.width = 650;\n          canvasObj.height = 414;\n          ctx.drawImage(img, 0,0, 650, 414);\n          console.log(\"uloaded psd file\", mackupPsd)\n          mackupPsd.children.forEach(leier => {\n            if (leier.name === \"YOUR CHANGE HERE\") {\n              console.log(\"find YOUR CHANGE HERE leier\")\n              leier.children.forEach(leierChild => {\n                if (leierChild.clipping) {\n                  console.log(\"this welbe deleted!\")\n                  leierChild.canvas = canvasObj\n                }\n              })\n            }\n          })\n          console.log(\"new psd file\", mackupPsd)\n          const arrayBuffer = writePsd(mackupPsd)\n          var blob = new Blob([arrayBuffer], { type: 'application/octet-stream' });\n          var url = URL.createObjectURL(blob);\n          linksLoad.push(url)\n          // setMackupDownload(url)\n          console.log(typeof arrayBuffer, arrayBuffer)\n          setLoadLinks(linksLoad)\n          setProc(true)\n        };\n        // ctx.fillStyle = '#000000'\n        // ctx.beginPath()\n        // ctx.arc(50, 100, 20, 0, 2*Math.PI)\n        // ctx.fill()\n\n      }\n    }\n  }, [mackupPsd, imageFiles])\n\n    const changeHandler = (event) => {\n      console.log(event.target.files[0])\n      fileToArrayBuffer(event.target.files[0]).then((data) => {\n        console.log(data)\n        const psd2 = readPsd(data);\n        setMackupPsd(psd2)\n        // console.log(psd2);\n      });\n        // const psd2 = readPsd(event.target.files[0]);\n        // console.log(psd2);\n    }\n\n  const changeHandlerImgs = (event) => {\n    console.log(event.target)\n    setImageFiles(event.target.files)\n    // const psd2 = readPsd(event.target.files[0]);\n    // console.log(psd2);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {/*<p>*/}\n        {/*  Edit <code>src/App.js</code> and save to reload.*/}\n        {/*</p>*/}\n        <input type=\"file\" name=\"file\" onChange={changeHandler} />\n        {/*<a href={mackupDownload} download> get makc up</a>*/}\n        {/*<a*/}\n        {/*  className=\"App-link\"*/}\n        {/*  href=\"https://reactjs.org\"*/}\n        {/*  target=\"_blank\"*/}\n        {/*  rel=\"noopener noreferrer\"*/}\n        {/*>*/}\n        {/*  Learn React*/}\n        {/*</a>*/}\n        <input type=\"file\" name=\"file\" onChange={changeHandlerImgs} multiple/>\n        {proc&&<span>-Files-</span>}\n        {loadLinks.map(url => {\n          const filename = new Date().getTime()+\"-\"+Math.random().toString(36).substring(10)+Math.random().toString(36).substring(10)+\".psd\"\n          return <a href={url} download={filename}>{filename}</a>\n        })}\n        {proc&&<span>-Files-</span>}\n        <canvas style={{display: \"none\"}} ref={canvasRef} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}